import socket
import re
import os
import io
import glob

IP = '0.0.0.0'
PORT = 80
SOCKET_TIMEOUT = 1
LEN_OF_INPUT = 9999


# Ex 4.4 - HTTP Server Shell
# Author: Avia Avikasis


def handle_client_request(resource, client_socket):
    """ Check the required resource, generate proper HTTP response and send to client"""
    if resource == '/':
        resource = "C:/Networks/webroot/index.html"
    content_type = resource.split('.')[len(resource.split('.')) - 1]

    if not os.path.isfile(resource) and resource != '/':
        client_socket.send(
            "HTTP/1.1 404 NOT FOUND\r\nContent-Length: 13\r\nContent-Type: text/html\r\n\r\n404 NOT FOUND".encode())
        client_socket.close()
        return

    if re.search("C:/Networks/webroot/noaccess", resource):
        client_socket.send((
                                       "HTTP/1.1 403 Forbidden\r\nContent-Length: 13\r\nContent-Type:" + content_type + "\r\n\r\n403 Forbidden").encode())
        client_socket.close()
        return

    if re.search("C:/Networks/webroot/302moved", resource):
        resource = resource.replace('302moved', 'moved')
        client_socket.send((
                                       "HTTP/1.1 302 Found\r\nContent-Length: 9\r\nContent-Type:" + content_type + "\r\nLocation: http://127.0.0.1/" + resource).encode())
        client_socket.close()
        return

    if content_type in ["txt", "html"]:
        content_type = 'text/html'
        input_file = open(resource, 'rb')
    elif content_type in ["jpg", 'JPG', "ico"]:
        content_type = 'image/jpeg'
        input_file = open(resource, 'rb')
    elif content_type == "js":
        content_type = 'text/javascript'
        input_file = open(resource, 'rb')
    elif content_type == "css":
        content_type = 'text/css'
        input_file = open(resource, 'rb')

    data = input_file.read()
    if content_type == 'image/jpeg':
        data = data.decode('Latin1')
    else:
        data = data.decode()
    length = str(len(data))
    data = "HTTP/1.1 200 ok\r\nContent-Length: " + length + "\r\nContent-Type: " + content_type + "\r\n\r\n" + data
    if content_type == 'image/jpeg':
        client_socket.send(data.encode(encoding='Latin1'))
    else:
        client_socket.send(data.encode())


def validate_http_request(request):
    """ Check if request is a valid HTTP request and returns TRUE / FALSE and the requested URL """
    request = request.split()
    method, url, version = request[0], request[1], request[2]
    if len(url) > 1:
        url = url[1:]
    if not re.search("C:/Networks/webroot/", url) and url != '/':
        url = "C:/Networks/webroot/" + url

    if method == 'GET' and re.search("HTTP/1.1", version):
        return True, url
    else:
        content_type = url.split('.')[len(url.split('.')) - 1]
        return False, "HTTP/1.1 500 Internal Server Error\r\nContent-Length: 25\r\nContent-Type: " + content_type + "\r\n\r\n"


def handle_client(client_socket):
    """ Handles client requests: verifies client's requests are legal HTTP, calls function to handle the requests """
    print('Client connected')
    while True:
        client_request = client_socket.recv(LEN_OF_INPUT).decode()
        valid_http, resource = validate_http_request(client_request)
        if valid_http:
            print('Got a valid HTTP request')
            handle_client_request(resource, client_socket)
            break
        else:
            client_socket.send(resource.encode())
            break

    print('Closing connection')
    client_socket.close()


def main():
    # Open a socket and loop forever while waiting for clients
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((IP, PORT))
    server_socket.listen()
    print("Listening for connections on port {}".format(PORT))

    while True:
        client_socket, client_address = server_socket.accept()
        print('New connection received')
        handle_client(client_socket)


main()
